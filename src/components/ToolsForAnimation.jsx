import React, { useState, useEffect } from "react";
import "../index.css";
import completeGif from "../images/done.gif";
import pointsGif from "../images/diamond.gif";
import streakGif from "../images/confetti.gif";

const ToolsForAnimation = ({ onComplete, onBack }) => {
  const [showQuiz, setShowQuiz] = useState(false);
  const [selectedAnswers, setSelectedAnswers] = useState({});
  const [hearts, setHearts] = useState(5);
  const [quizCompleted, setQuizCompleted] = useState(false);
  const [lessonCompleted, setLessonCompleted] = useState(false);

  useEffect(() => {
    const savedHearts = localStorage.getItem("hearts");
    if (savedHearts) {
      setHearts(parseInt(savedHearts, 10));
    }
  }, []);

  useEffect(() => {
    localStorage.setItem("hearts", hearts);
  }, [hearts]);

  const pages = [
    "üé¨ Animation involves different techniques and structured workflows to create smooth, engaging motion.","4.1 Animation Techniques :- ",
    "1. Frame-by-Frame Animation -",
    "   Each frame is drawn separately to create motion.",
    "   Used in traditional animation and some 2D digital animations.",
    "   Example: Classic Disney movies like Snow White and the Seven Dwarfs.",
    "2. Rigging & Cutout Animation -",
    "   Instead of drawing each frame, characters are created with movable parts (rigged like a puppet).",
    "   Used in 2D digital animation (Toon Boom, Adobe Animate).",
    "   Example: South Park uses cutout-style animation.",
    "3. Tweening (Inbetweening) -",
    "   The software automatically generates frames between key poses.",
    "   Used in 2D and motion graphics (Adobe Animate, After Effects).",
    "   Example: Creating smooth movement between two positions of an object.",
    "4. 3D Animation & Motion Capture -",
    "   3D characters and environments are modeled, rigged, and animated.",
    "   Motion capture records real human movements and applies them to digital characters.",
    "   Example: Toy Story (3D) and Avatar (motion capture).",
    "5. Rotoscoping -",
    "   Tracing real-life footage to create realistic animations.",
    "   Used in visual effects (VFX) and realistic character animation.",
    "   Example: A Scanner Darkly used rotoscoping for a unique visual effect.",
    "6. Procedural & AI-Based Animation -",
    "   Animations are generated by algorithms or artificial intelligence.",
    "   Used in game development for dynamic character movement.",
    "   Example: AI-driven crowd animations in movies.",
    "üéâ You've completed the lesson! Now, let's test your knowledge with a quiz!"
  ];

  const quizQuestions = [
    {
      question: "Which animation technique involves drawing each frame separately to create motion?",
      options: [
        "Rigging & Cutout Animation",
        "Tweening",
        "Frame-by-Frame Animation",
        "Procedural Animation"
      ],
      correctAnswer: "Frame-by-Frame Animation"
    },
    {
      question: "What is an example of Rigging & Cutout Animation?",
      options: ["South Park", "Toy Story", "A Scanner Darkly", "Snow White and the Seven Dwarfs"],
      correctAnswer: "South Park"
    },
    {
      question: "Which animation method uses real human movements recorded and applied to digital characters?",
      options: ["Rotoscoping", "Motion Capture", "Tweening", "Frame-by-Frame Animation"],
      correctAnswer: "Motion Capture"
    }
  ];

  const handleQuizAnswer = (questionIndex, answer) => {
    setSelectedAnswers({ ...selectedAnswers, [questionIndex]: answer });
  };

  const handleSubmitQuiz = () => {
    const allCorrect = quizQuestions.every(
      (q, index) => selectedAnswers[index] === q.correctAnswer
    );

    if (Object.keys(selectedAnswers).length < quizQuestions.length) {
      alert("Please answer all questions before submitting.");
      return;
    }

    if (allCorrect) {
      setQuizCompleted(true);
      setHearts(5); // Reset hearts upon completion
      setLessonCompleted(true);
    } else {
      setHearts((prev) => Math.max(0, prev - 1)); // Deduct heart if wrong
    }
  };

  return (
    <div className="lesson-container">
      {/* HEADER */}
      <div className="lesson-header">
      
        <div className="stats-container">
          <div className="hearts-container">
            <span className="hearts">
              {"‚ù§Ô∏è".repeat(hearts) + "ü§ç".repeat(5 - hearts)}
            </span>
          </div>
          
        </div>
      </div>

      {/* SCROLLABLE LESSON CONTENT */}
      {!showQuiz && !lessonCompleted && (
        <div className="scrollable-content">
          {pages.map((content, index) => (
            <p key={index} className="lesson-content">{content}</p>
          ))}
          <button className="start-quiz-button" onClick={() => setShowQuiz(true)}>
            Start Quiz
          </button>
        </div>
      )}

      {/* QUIZ SECTION */}
      {showQuiz && !lessonCompleted && (
        <div className="quiz-container">
          {quizQuestions.map((q, index) => (
            <div key={index} className="quiz-question">
              <p>{q.question}</p>
              {q.options.map((option) => (
                <button
                  key={option}
                  className={`quiz-option ${
                    selectedAnswers[index] === option ? "selected" : ""
                  }`}
                  onClick={() => handleQuizAnswer(index, option)}
                >
                  {option}
                </button>
              ))}
            </div>
          ))}
          {hearts > 0 ? (
            <button className="submit-quiz-button" onClick={handleSubmitQuiz}>
              Submit Quiz
            </button>
          ) : (
            <p className="no-hearts">üíî You ran out of hearts! Restart the lesson.</p>
          )}
          {quizCompleted && (
            <p className="completed-message">üéâ Quiz Completed! Next module unlocked!</p>
          )}
        </div>
      )}

      {/* LESSON COMPLETED SCREEN */}
      {lessonCompleted && (
        <div className="completed-section">
          <img src={completeGif} alt="Lesson Completed" className="completed-gif" />
          <p className="completed-message">
            üéâ Congratulations! You've completed this lesson!
          </p>
          <button className="done-button" onClick={onComplete}>‚úÖ DONE</button>
        </div>
      )}

      
    </div>
  );
};

export default ToolsForAnimation;